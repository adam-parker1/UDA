# Macro used to convert Windows path to Unix
macro( CONVERT_WIN_PATH VarName )
  if( MINGW AND NOT "${${VarName}}" STREQUAL "" )
    execute_process( COMMAND cygpath.exe -u ${${VarName}} OUTPUT_VARIABLE ${VarName} )
    string( STRIP ${${VarName}} ${VarName} )
    string( REGEX REPLACE "[\r\n]+" ";" ${VarName} ${${VarName}} )
  endif()
endmacro()

########################################################################################################################
# Dependencies
find_package( IDL )
find_package( Java 1.6 )
find_package( JNI )
find_package( SWIG 3.0 )
find_package( Boost )
if( MINGW )
  CONVERT_WIN_PATH( SWIG_DIR )
  CONVERT_WIN_PATH( JAVA_INCLUDE_PATH )
  CONVERT_WIN_PATH( JAVA_INCLUDE_PATH2 )
  CONVERT_WIN_PATH( JAVA_AWT_INCLUDE_PATH )
  CONVERT_WIN_PATH( JAVA_AWT_LIBRARY )
  CONVERT_WIN_PATH( JAVA_JVM_LIBRARY )
  CONVERT_WIN_PATH( JNI_LIBRARIES )
  CONVERT_WIN_PATH( JNI_INCLUDE_DIRS )
endif()

if( Boost_FOUND )
  add_subdirectory( c++ )

  # Python wrapper can only be build if c++ wrapper is also being built
  if( WIN32 OR MINGW )
    find_package( PythonLibs 3.3 )
    if( SWIG_FOUND AND PYTHONLIBS_FOUND )
      add_definitions( -DSWIG )
      add_subdirectory( python )
    else()
      message( WARNING "SWIG or PythonLibs not found - not building Python wrapper" )
    endif()
  else()
    if( SWIG_FOUND )
      add_definitions( -DSWIG )
      add_subdirectory( python )
    else()
      message( WARNING "SWIG not found - not building Python wrapper" )
    endif()
  endif()
else()
  message( WARNING "Boost not found - not building C++ (or Python) wrapper" )
endif()

if( IDL_FOUND )
  add_subdirectory( idl )
else()
  message( WARNING "IDL not found - not building IDL wrapper" )
endif()

if( JAVA_FOUND AND JNI_FOUND )
  add_subdirectory( java )
else()
  message( WARNING "JAVA or JNI not found - not building Java wrapper" )
endif()

#add_subdirectory( matlab )
#add_subdirectory( PHP )

#!/bin/env python

from __future__ import print_function

import os
import argparse
from collections import namedtuple


Plugin = namedtuple('Plugin', 'cls entry lib desc example extension')


def parse(lines):
    plugins = {}
    for line in lines:
        line = line.strip()
        if line.startswith('#') or not line:
            continue
        (name, cls, entry, lib, extension, _, _, _, desc, example) = [i.strip() for i in line.split(',', 9)]
        plugins[name] = Plugin(cls, entry, lib, desc, example, extension) 
    return plugins


def write(plugin_file, plugins):
    with open(plugin_file, 'w') as file:
        for name, plugin in plugins.items():
            print('%s, %s, %s, %s, %s, 1, 1, 1, %s, %s'
                  % (name, plugin.cls, plugin.entry, plugin.lib, plugin.extension, plugin.desc, plugin.example), file=file)


def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('--uda-home', '-u', help='UDA installation directory')
    parser.add_argument('command', choices=['install', 'uninstall', 'list'], help='action to perform')
    parser.add_argument('plugin', help='name of plugin')

    args = parser.parse_args(args[1:])

    if args.uda_home:
        uda_home = args.uda_home
    elif 'UDA_DIR' in os.environ:
        uda_home = os.environ['UDA_DIR']
    else:
        raise SystemExit('UDA installation directory not found in $UDA_DIR or provided as argument')

    plugins_conf = os.path.join(uda_home, 'etc', 'plugins', 'udaPlugins.conf')

    if not os.path.exists(plugins_conf):
        raise SystemExit('udaPlugins.conf not found')

    with open(plugins_conf) as file:
        lines = file.readlines()
        installed_plugins = parse(lines)

    plugin_name = args.plugin.upper()

    if args.command == 'list':
        for (name, plugin) in installed_plugins.items():
            print('%s: %s' % (name, plugin.lib))
    elif args.command == 'uninstall':
        if plugin_name not in installed_plugins:
            raise SystemExit('plugin %s not installed' % args.plugin)
        del installed_plugins[plugin_name]
        write(plugins_conf, installed_plugins)
    elif args.command == 'install':
        if plugin_name in installed_plugins:
            raise SystemExit('plugin %s already installed' % args.plugin)
        plugin_conf = os.path.join(uda_home, 'etc', 'plugins', 'udaPlugins_%s.conf' % plugin_name)
        if not os.path.exists(plugin_conf):
            raise SystemExit('%s not found' % plugin_conf)
        with open(plugin_conf) as file:
            lines = file.readlines()
            plugins = parse(lines)
            if not plugin_name in plugins:
                raise SystemExit('plugin %s not found in %s' % (args.plugin, plugin_conf))
            plugin = plugins[plugin_name]
        installed_plugins[plugin_name] = plugin
        write(plugins_conf, installed_plugins)
            

if __name__ == '__main__':
    import sys
    main(sys.argv)
